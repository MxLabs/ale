// Code generated by "stringer -type=Opcode"; DO NOT EDIT.

package isa

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Label-256]
	_ = x[Add-0]
	_ = x[Arg-1]
	_ = x[ArgLen-2]
	_ = x[Bind-3]
	_ = x[Call-4]
	_ = x[Call0-5]
	_ = x[Call1-6]
	_ = x[Closure-7]
	_ = x[CondJump-8]
	_ = x[Const-9]
	_ = x[Declare-10]
	_ = x[Deref-11]
	_ = x[Div-12]
	_ = x[Dup-13]
	_ = x[EmptyList-14]
	_ = x[Eq-15]
	_ = x[False-16]
	_ = x[Gt-17]
	_ = x[Gte-18]
	_ = x[Jump-19]
	_ = x[Load-20]
	_ = x[Lt-21]
	_ = x[Lte-22]
	_ = x[MakeCall-23]
	_ = x[MakeTruthy-24]
	_ = x[Mod-25]
	_ = x[Mul-26]
	_ = x[Neg-27]
	_ = x[NegInf-28]
	_ = x[NegOne-29]
	_ = x[Neq-30]
	_ = x[Nil-31]
	_ = x[NoOp-32]
	_ = x[Not-33]
	_ = x[One-34]
	_ = x[Panic-35]
	_ = x[Pop-36]
	_ = x[PosInf-37]
	_ = x[Resolve-38]
	_ = x[RestArg-39]
	_ = x[Return-40]
	_ = x[RetEmptyList-41]
	_ = x[RetFalse-42]
	_ = x[RetNil-43]
	_ = x[RetTrue-44]
	_ = x[Self-45]
	_ = x[Store-46]
	_ = x[Sub-47]
	_ = x[TailCall-48]
	_ = x[True-49]
	_ = x[Two-50]
	_ = x[Zero-51]
}

const (
	_Opcode_name_0 = "AddArgArgLenBindCallCall0Call1ClosureCondJumpConstDeclareDerefDivDupEmptyListEqFalseGtGteJumpLoadLtLteMakeCallMakeTruthyModMulNegNegInfNegOneNeqNilNoOpNotOnePanicPopPosInfResolveRestArgReturnRetEmptyListRetFalseRetNilRetTrueSelfStoreSubTailCallTrueTwoZero"
	_Opcode_name_1 = "Label"
)

var (
	_Opcode_index_0 = [...]uint8{0, 3, 6, 12, 16, 20, 25, 30, 37, 45, 50, 57, 62, 65, 68, 77, 79, 84, 86, 89, 93, 97, 99, 102, 110, 120, 123, 126, 129, 135, 141, 144, 147, 151, 154, 157, 162, 165, 171, 178, 185, 191, 203, 211, 217, 224, 228, 233, 236, 244, 248, 251, 255}
)

func (i Opcode) String() string {
	switch {
	case 0 <= i && i <= 51:
		return _Opcode_name_0[_Opcode_index_0[i]:_Opcode_index_0[i+1]]
	case i == 256:
		return _Opcode_name_1
	default:
		return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
