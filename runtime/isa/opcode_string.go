// Code generated by "stringer -type=Opcode"; DO NOT EDIT.

package isa

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Label-256]
	_ = x[Add-0]
	_ = x[Arg-1]
	_ = x[ArgLen-2]
	_ = x[Bind-3]
	_ = x[BindRef-4]
	_ = x[Call-5]
	_ = x[Call0-6]
	_ = x[Call1-7]
	_ = x[Closure-8]
	_ = x[CondJump-9]
	_ = x[Const-10]
	_ = x[Declare-11]
	_ = x[Deref-12]
	_ = x[Div-13]
	_ = x[Dup-14]
	_ = x[EmptyList-15]
	_ = x[Eq-16]
	_ = x[False-17]
	_ = x[Gt-18]
	_ = x[Gte-19]
	_ = x[Jump-20]
	_ = x[Load-21]
	_ = x[Lt-22]
	_ = x[Lte-23]
	_ = x[MakeCall-24]
	_ = x[MakeTruthy-25]
	_ = x[Mod-26]
	_ = x[Mul-27]
	_ = x[Neg-28]
	_ = x[NegInf-29]
	_ = x[NegOne-30]
	_ = x[Neq-31]
	_ = x[NewRef-32]
	_ = x[Nil-33]
	_ = x[NoOp-34]
	_ = x[Not-35]
	_ = x[One-36]
	_ = x[Panic-37]
	_ = x[Pop-38]
	_ = x[PosInf-39]
	_ = x[Resolve-40]
	_ = x[RestArg-41]
	_ = x[Return-42]
	_ = x[RetEmptyList-43]
	_ = x[RetFalse-44]
	_ = x[RetNil-45]
	_ = x[RetTrue-46]
	_ = x[Self-47]
	_ = x[Store-48]
	_ = x[Sub-49]
	_ = x[TailCall-50]
	_ = x[True-51]
	_ = x[Two-52]
	_ = x[Zero-53]
}

const (
	_Opcode_name_0 = "AddArgArgLenBindBindRefCallCall0Call1ClosureCondJumpConstDeclareDerefDivDupEmptyListEqFalseGtGteJumpLoadLtLteMakeCallMakeTruthyModMulNegNegInfNegOneNeqNewRefNilNoOpNotOnePanicPopPosInfResolveRestArgReturnRetEmptyListRetFalseRetNilRetTrueSelfStoreSubTailCallTrueTwoZero"
	_Opcode_name_1 = "Label"
)

var (
	_Opcode_index_0 = [...]uint16{0, 3, 6, 12, 16, 23, 27, 32, 37, 44, 52, 57, 64, 69, 72, 75, 84, 86, 91, 93, 96, 100, 104, 106, 109, 117, 127, 130, 133, 136, 142, 148, 151, 157, 160, 164, 167, 170, 175, 178, 184, 191, 198, 204, 216, 224, 230, 237, 241, 246, 249, 257, 261, 264, 268}
)

func (i Opcode) String() string {
	switch {
	case 0 <= i && i <= 53:
		return _Opcode_name_0[_Opcode_index_0[i]:_Opcode_index_0[i+1]]
	case i == 256:
		return _Opcode_name_1
	default:
		return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
